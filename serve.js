const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const favicon = require('serve-favicon')
const compression = require('compression')
const express = require('express')
const server = express()
const resolve = file => path.resolve(__dirname, file)

const isProd = process.env.NODE_ENV === 'production'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`
/**
 * 每次编辑过应用程序源代码之后，都必须停止并重启服务。这在开发过程中会影响开发效率
 * 此外，Node.js 本身不支持 source map
 */
// const createApp = require('./src/entry-server')
// const renderer = require('vue-server-renderer').createRenderer({
//   template: require('fs').readFileSync('./index.template.html', 'utf-8')
// })

// createBundleRenderer用于解决上述问题
const { createBundleRenderer } = require('vue-server-renderer')

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: new LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    server,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

server.use(compression({ threshold: 0 }))
server.use(favicon('./public/logo-48.png'))
server.use('/dist', serve('./dist', true))
server.use('/public', serve('./public', true))
// server.use('/manifest.json', serve('./manifest.json', true))
// server.use('/service-worker.js', serve('./dist/service-worker.js'))

function render (req, res) {
  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if(err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: 'ssr模板练习',
    metas: `
      <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
      <meta name="keyword" content="vue,ssr">
      <meta name="description" content="vue srr demo">
    `,
    url: req.url
  }

  renderer.renderToString(context, (err, html) => {
    console.log('-------------', context.renderStyles())
    if (err) {
      return handleError(err)
    }
    res.send(html)
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

server.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
})
// server.get('*', (req, res) => {
//   res.setHeader("Content-Type", "text/html")
//   const context = {
//     title: 'ssr模板练习',
//     metas: `
//       <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
//       <meta name="keyword" content="vue,ssr">
//       <meta name="description" content="vue srr demo">
//     `,
//     url: req.url
//   }

//   const renderer = createBundleRenderer(serverBundle, {
//     runInNewContext: false, // 推荐
//     template, // （可选）页面模板
//     clientManifest // （可选）客户端构建 manifest
//   })
//   renderer.renderToString(context, (err, html) => {
//     if (err) {
//       if (err.code === 404) {
//         res.status(404).end('Page not found')
//       } else {
//         res.status(500).end('Internal Server Error')
//       }
//     } else {
//       res.end(html)
//     }
//   })

// })

const port = process.env.PORT || 8080
server.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
